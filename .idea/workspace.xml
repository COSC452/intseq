<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f28dc8f2-9cac-4740-9aa3-d60db5fcfb27" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/intseq/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/intseq/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/repl-port" beforeDir="false" afterPath="$PROJECT_DIR$/target/repl-port" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/intseq/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="508">
              <caret line="137" column="2" lean-forward="true" selection-start-line="137" selection-start-column="2" selection-end-line="137" selection-end-column="2" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/intseq/ops.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="375">
              <caret line="25" column="27" selection-start-line="25" selection-start-column="27" selection-end-line="25" selection-end-column="27" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>select</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/intseq/ops.clj" />
        <option value="$PROJECT_DIR$/src/intseq/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="23" />
    <option name="width" value="1193" />
    <option name="height" value="715" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension./Users/alexanderlee/Desktop/Amherst/S20/COSC-452/Project/IntSeq/Code/intseq/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="ReplState" timestamp="1585881637183">{:repl-history {:ide [], :local [{:command &quot;(ns intseq.core\n  (:require intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (+ (second stack) (first stack))\n                                       (rest (rest stack))))\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n(intseq.ops/hello)\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 6170, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (intseq.ops/int-add)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5976, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (intseq.ops/int-add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5982, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + ((intseq.ops/int-add stack))\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5984, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (intseq.ops/add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5978, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:use intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (intseq.ops/add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5974, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5981, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:use intseq.ops))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (int-add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5967, :ns &quot;intseq.core&quot;} {:command &quot;(use intseq.ops)&quot;, :offset 16, :ns &quot;intseq.core&quot;} {:command &quot;(require '[intseq.ops])&quot;, :offset 23, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (- (second stack) (first stack))\n                                       (rest (rest stack))))\n                             * (if (&lt; (count stack) 2)\n                                 stack\n                                 (cons (* (second stack) (first stack))\n                                       (rest (rest stack))))\n                             / (if (or (&lt; (count stack) 2)\n                                       (zero? (first stack)))\n                                 stack\n                                 (cons (Math/floorDiv (second stack) (first stack))\n                                       (rest (rest stack))))\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5985, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [min-err-for-case (apply min (map error\n                                             (map :genome candidates)\n                                             (repeat (count candidates) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       candidates)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5380, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)(ns intseq.core\n                                              (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (println genomes)\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 10790, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error (:genome %) [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5362, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                              (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error genomes [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5402, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                              (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error % [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5396, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                              (:require [intseq.ops :as ops]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) x 1)]))\n\n(def ingredients '(+ - * / x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (loop [program genome\n                       stack ()]\n                  (if (empty? program)\n                    (if (empty? stack)\n                      1000000\n                      (Math/abs (- output (first stack))))\n                    (recur (rest program)\n                           (case (first program)\n                             + (ops/int-add stack)\n                             - (ops/int-sub stack)\n                             * (ops/int-mult stack)\n                             / (ops/int-div stack)\n                             x (cons input stack)\n                             (cons (first program) stack)))))))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn tournament-selection [population]\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn lexicase-selection [population test-pairs]\n  (loop [genomes (map :genome (distinct population))\n         cases (shuffle test-pairs)]\n    (println genomes)\n    (if (or (empty? cases)\n            (empty? (rest genomes)))\n      (rand-nth genomes)\n      (let [min-err-for-case (apply min (map error\n                                             genomes\n                                             (repeat (count genomes) [(first cases)])))]\n        (recur (filter #(= min-err-for-case (error % [(first cases)]))\n                       genomes)\n               (rest cases))))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an indivudal selected from population using lexicase selection.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 5418, :ns &quot;intseq.core&quot;} {:command &quot;(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 42, :ns &quot;intseq.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for intseq" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="intseq" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for intseq" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f28dc8f2-9cac-4740-9aa3-d60db5fcfb27" name="Default Changelist" comment="" />
      <created>1585855023189</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1585855023189</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1193" height="715" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" weight="0.16333623" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" weight="0.20064205" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.27541268" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" column="37" selection-start-line="6" selection-start-column="37" selection-end-line="6" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/intseq/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="508">
          <caret line="137" column="2" lean-forward="true" selection-start-line="137" selection-start-column="2" selection-end-line="137" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/intseq/ops.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="375">
          <caret line="25" column="27" selection-start-line="25" selection-start-column="27" selection-end-line="25" selection-end-column="27" />
        </state>
      </provider>
    </entry>
  </component>
</project>