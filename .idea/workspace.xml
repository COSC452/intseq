<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f28dc8f2-9cac-4740-9aa3-d60db5fcfb27" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/intseq/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/intseq/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/repl-port" beforeDir="false" afterPath="$PROJECT_DIR$/target/repl-port" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/intseq/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="2330">
              <caret line="165" column="2" lean-forward="true" selection-start-line="165" selection-start-column="2" selection-end-line="165" selection-end-column="2" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/intseq/ops.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1185">
              <caret line="79" column="17" selection-start-line="79" selection-start-column="17" selection-end-line="79" selection-end-column="17" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>select</find>
      <find>Math/round</find>
      <find>int</find>
      <find>long</find>
      <find>map</find>
      <find>pmap</find>
    </findStrings>
    <replaceStrings>
      <replace>int</replace>
      <replace>long</replace>
      <replace>bigint</replace>
      <replace>map</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/intseq/utils.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/intseq/ops.clj" />
        <option value="$PROJECT_DIR$/src/intseq/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="23" />
    <option name="width" value="1193" />
    <option name="height" value="715" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="intseq" type="b2602c69:ProjectViewProjectNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="intseq" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension./Users/alexanderlee/Desktop/Amherst/S20/COSC-452/Project/IntSeq/Code/intseq/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="ReplState" timestamp="1586463127145">{:repl-history {:ide [], :local [{:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n&quot;, :offset 1870, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n&quot;, :offset 1869, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (mod x 2) (* 2 x) (math/lcm x (+ x 4)))]))\n\n(def ingredients '(+ - * / mod expt abs gcd lcm sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 6120, :ns &quot;intseq.ops&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (mod x 2) (* 2 x) (math/lcm x (+ x 4)))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 6116, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (mod x 2) (* 2 x) (math/gcd x (+ x 4)))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 6116, :ns &quot;intseq.core&quot;} {:command &quot;(gp 200 100 (get-seq) :lexicase-selection)&quot;, :offset 42, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (x 2) (* 2 x) (math/expt x ))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6156, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (ops/add (ops/sub x 2) (ops/abs x) (ops/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6174, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (ops/sub x 2) (ops/abs x) (ops/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6168, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (math/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6164, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n\n&quot;, :offset 1922, :ns &quot;intseq.core&quot;} {:command &quot;(combo/count-permutations [1 1 1 1])&quot;, :offset 34, :ns &quot;intseq.ops&quot;} {:command &quot;(combo/count-permutations (range 5))&quot;, :offset 34, :ns &quot;intseq.ops&quot;} {:command &quot;(combo/count-permutations-from-frequencies 2)&quot;, :offset 44, :ns &quot;intseq.ops&quot;} {:command &quot;(range 0)&quot;, :offset 8, :ns &quot;intseq.ops&quot;} {:command &quot;(combo/count-permutations (range 0))&quot;, :offset 34, :ns &quot;intseq.ops&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]\n            []))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (math/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan perm comb x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6263, :ns &quot;intseq.ops&quot;} {:command &quot;(combo/count-combinations (range 5) 3)&quot;, :offset 37, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (combo/count-permutations (range (first stack)))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    (cons (combo/count-combinations (range (second stack)) (first stack))\n          (rest (rest stack)))))&quot;, :offset 2213, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (combo/count-permutations (range (first stack)))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (combo/count-combinations (range (second stack)) (first stack))\n          (rest (rest stack)))))&quot;, :offset 2223, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (math/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan perm comb x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6248, :ns &quot;intseq.ops&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (math/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6238, :ns &quot;intseq.core&quot;} {:command &quot;(*' 3 5)&quot;, :offset 7, :ns &quot;intseq.core&quot;} {:command &quot;(/' 4 3)&quot;, :offset 7, :ns &quot;intseq.core&quot;} {:command &quot;(math/lcm (bigint 4) (bigint 3))&quot;, :offset 30, :ns &quot;intseq.core&quot;} {:command &quot;(type (* (bigint 3) (bigint 5)))&quot;, :offset 32, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (+ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (- (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (biginteger (* (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (bigint (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (bigint (mod (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (bigint (math/expt (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (math/abs (first stack)))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (math/gcd (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (math/lcm (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (combo/count-permutations (range (first stack))))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (combo/count-combinations (range (second stack)) (first stack)))\n          (rest (rest stack)))))&quot;, :offset 2327, :ns &quot;intseq.core&quot;} {:command &quot;(bigint (/ 4 5))&quot;, :offset 14, :ns &quot;intseq.core&quot;} {:command &quot;(e)&quot;, :offset 3, :ns &quot;intseq.core&quot;} {:command &quot;(clojure.stacktrace$e)&quot;, :offset 21, :ns &quot;intseq.core&quot;} {:command &quot;(bigint (math/sqrt 5))&quot;, :offset 20, :ns &quot;intseq.core&quot;} {:command &quot;(bigint (math/sqrt 8443512187461738385))&quot;, :offset 38, :ns &quot;intseq.core&quot;} {:command &quot;(clojure.stacktrace/e)&quot;, :offset 22, :ns &quot;intseq.core&quot;} {:command &quot;(Math/sqrt (bigint 2354))&quot;, :offset 23, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (+ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (- (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (biginteger (* (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (bigint (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (bigint (mod (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (bigint (math/expt (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (math/abs (first stack)))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (math/gcd (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (math/lcm (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (bigint (combo/count-permutations (range (first stack))))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (bigint (combo/count-combinations (range (second stack)) (first stack)))\n          (rest (rest stack)))))&quot;, :offset 2325, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (- (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (* (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (/ (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (combo/count-permutations (range (first stack))))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (long (combo/count-combinations (range (second stack)) (first stack)))\n          (rest (rest stack)))))&quot;, :offset 2230, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (math/expt x 2))]))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as gcd, lcm, perm, comb.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6267, :ns &quot;intseq.ops&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (- x 2) (math/abs x) (- x 2))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as gcd, lcm, perm, comb.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (for [candidate candidates]\n    (let [input (first test-pair)\n          output (second test-pair)]\n      (conj candidate {:case-error (error-loop (:genome candidate) input output)}))))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (crossover (:genome (select population test-pairs select-type))\n                                      (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 6254, :ns &quot;intseq.core&quot;} {:command &quot;(gp 400 100 (get-seq) :lexicase-selection)&quot;, :offset 42, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                   (:require [intseq.ops :as ops]\n                                                             [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/9)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/10)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? ((crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type))))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection true)&quot;, :offset 6565, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/9)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/10)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? ((crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type))))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 100 (get-seq) :lexicase-selection true)&quot;, :offset 6467, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/9)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/10)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 1000 200 (get-seq) :lexicase-selection true)&quot;, :offset 6466, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 0.09)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 0.1)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 200 200 (get-seq) :lexicase-selection true)&quot;, :offset 6465, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 200 200 (get-seq) :lexicase-selection true)&quot;, :offset 6466, :ns &quot;intseq.core&quot;} {:command &quot;(gp 200 200 (get-seq) :lexicase-selection true)&quot;, :offset 47, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 200 200 (get-seq) :lexicase-selection false)&quot;, :offset 6467, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 0.09)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 0.1)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 200 200 (get-seq) :lexicase-selection false)&quot;, :offset 6466, :ns &quot;intseq.core&quot;} {:command &quot;(gp 200 200 (get-seq) :lexicase-selection false)&quot;, :offset 48, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ x 6))]))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 6466, :ns &quot;intseq.core&quot;} {:command &quot;[1,2,3,4]&quot;, :offset 9, :ns &quot;intseq.core&quot;} {:command &quot;(count (len [1 2 3]))&quot;, :offset 18, :ns &quot;intseq.core&quot;} {:command &quot;(count [1 2 3]))&quot;, :offset 6, :ns &quot;intseq.core&quot;} {:command &quot;(map conj [1 2] [3 4])&quot;, :offset 20, :ns &quot;intseq.core&quot;} {:command &quot;(map cons [1 2] [3 4])&quot;, :offset 9, :ns &quot;intseq.core&quot;} {:command &quot;(map concat [1 2] [3 4])&quot;, :offset 22, :ns &quot;intseq.core&quot;} {:command &quot;(map [1 2] [2 3])&quot;, :offset 15, :ns &quot;intseq.core&quot;} {:command &quot;(map #(vec %1 %2) [1 2] [3 4])&quot;, :offset 28, :ns &quot;intseq.core&quot;} {:command &quot;(vec 1 2)&quot;, :offset 8, :ns &quot;intseq.core&quot;} {:command &quot;(vec [1 2])&quot;, :offset 10, :ns &quot;intseq.core&quot;} {:command &quot;(map #(vec [%1 %2]) [1 2] [3 4])&quot;, :offset 18, :ns &quot;intseq.core&quot;} {:command &quot;(range (count [1 2 3]))&quot;, :offset 20, :ns &quot;intseq.core&quot;} {:command &quot;(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))&quot;, :offset 608, :ns &quot;intseq.core&quot;} {:command &quot;(get-seq)&quot;, :offset 8, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / expt x 0 1))\n;; '(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 200 100 (get-seq) :lexicase-selection true)&quot;, :offset 6790, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;; '(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 6785, :ns &quot;intseq.core&quot;} {:command &quot;(1 *' 2)&quot;, :offset 7, :ns &quot;intseq.core&quot;} {:command &quot;(*' 2 1)&quot;, :offset 7, :ns &quot;intseq.core&quot;} {:command &quot;(/' 1 2)&quot;, :offset 7, :ns &quot;intseq.core&quot;} {:command &quot;(/ 1 2)&quot;, :offset 2, :ns &quot;intseq.core&quot;} {:command &quot;(long (/ 1 2))&quot;, :offset 14, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.ops\n  (:require [clojure.math.numeric-tower :as math]\n            [clojure.math.combinatorics :as combo]))\n\n(defn add [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (+' (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sub [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (-' (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn mult [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (*' (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn div [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (long (/ (second stack) (first stack)))\n          (rest (rest stack)))))\n\n(defn mod- [stack]\n  (if (or (&lt; (count stack) 2)\n          (zero? (first stack)))\n    stack\n    (cons (mod (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn expt [stack]\n  (if (or (&lt; (count stack) 2)\n          (neg? (first stack)))\n    stack\n    (cons (math/expt (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn abs [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (math/abs (first stack))\n          (rest stack))))\n\n(defn gcd [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/gcd (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn lcm [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (math/lcm (second stack) (first stack))\n          (rest (rest stack)))))\n\n(defn sqrt [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sqrt (first stack)))\n          (rest stack))))\n\n(defn sin [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/sin (first stack)))\n          (rest stack))))\n\n(defn cos [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/cos (first stack)))\n          (rest stack))))\n\n(defn tan [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (Math/tan (first stack)))\n          (rest stack))))\n\n(defn perm [stack]\n  (if (&lt; (count stack) 1)\n    stack\n    (cons (long (combo/count-permutations (range (first stack))))\n          (rest stack))))\n\n(defn comb [stack]\n  (if (&lt; (count stack) 2)\n    stack\n    (cons (long (combo/count-combinations (range (second stack)) (first stack)))\n          (rest (rest stack)))))&quot;, :offset 2240, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod expt abs gcd sqrt sin cos tan x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 6817, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 0.09)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 0.0825)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 6814, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 6812, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection false)&quot;, :offset 6813, :ns &quot;intseq.core&quot;} {:command &quot;(gp 400 200 (get-seq) :lexicase-selection false)&quot;, :offset 48, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  ; A037270\n  ;(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n  ;      index (range (count seq))]\n  ;  (map #(vec [%1 %2]) index seq))\n\n  ; A000292\n  (let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 7088, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  ; A037270\n  ;(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n  ;      index (range (count seq))]\n  ;  (map #(vec [%1 %2]) index seq))\n\n  ; A000292\n  (let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (if (or (= (:error (best population)) 0)\n            (&gt;= generation generations))\n      (best population)\n      (recur (repeatedly population-size\n                         #(make-child population test-pairs select-type crossover?))\n             (inc generation)))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 7059, :ns &quot;intseq.core&quot;} {:command &quot;(gp 400 200 (get-seq) :lexicase-selection true)&quot;, :offset 47, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  ; A037270\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq))\n\n  ; A000292\n  ;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n  ;      index (range (count seq))]\n  ;  (map #(vec [%1 %2]) index seq))\n  )\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation))\n          (recur (conj (repeatedly (dec population-size)\n                             #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation)))))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7380, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)])\n\n  ; A037270\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq))\n\n  ; A000292\n  ;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n  ;      index (range (count seq))]\n  ;  (map #(vec [%1 %2]) index seq))\n  )\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7386, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n  (:require [intseq.ops :as ops]\n            [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n  ; A037270\n  (let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n        index (range (count seq))]\n    (map #(vec [%1 %2]) index seq)))\n\n  ; A000292\n  ;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n  ;      index (range (count seq))]\n  ;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                      (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7385, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  (for [x (range 0 10 1)]\n    [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n;(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7479, :ns &quot;intseq.core&quot;} {:command &quot;(gp 400 200 (get-seq) :lexicase-selection true true)&quot;, :offset 52, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7364, :ns &quot;intseq.core&quot;} {:command &quot;(gp 400 200 (get-seq) :lexicase-selection true false)&quot;, :offset 53, :ns &quot;intseq.core&quot;} {:command &quot;(size [1 2 3])&quot;, :offset 12, :ns &quot;intseq.core&quot;} {:command &quot;(count [1 2 3])&quot;, :offset 13, :ns &quot;intseq.core&quot;} {:command &quot;(sort-by count [1 2 34] [1] [1 2])&quot;, :offset 32, :ns &quot;intseq.core&quot;} {:command &quot;(sort-by count [[1 2 34] [1] [1 2]])&quot;, :offset 35, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (first (sort-by count (map :genome candidates)))\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 500 200 (get-seq) :lexicase-selection true true)&quot;, :offset 7330, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (println (map :genome candidates))\n      ;(first (sort-by count (map :genome candidates)))\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 500 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7373, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / x 0 1))\n;'(+ - * / mod abs gcd sqrt sin cos tan x 0 1)\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (first (sort-by #(count (:genome %)) candidates))\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 500 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7332, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (first (sort-by #(count (:genome %)) candidates))\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 500 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7314, :ns &quot;intseq.core&quot;} {:command &quot;(gp 500 200 (get-seq) :lexicase-selection true false)&quot;, :offset 53, :ns &quot;intseq.core&quot;} {:command &quot;(gp 500 200 (get-seq) :lexicase-selection true true)&quot;, :offset 52, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x 0 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (first (sort-by #(count (:genome %)) candidates))\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover? elitism?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (if elitism?\n          (recur (conj (repeatedly (dec population-size)\n                                   #(make-child population test-pairs select-type crossover?))\n                       best-individual)\n                 (inc generation))\n          (recur (repeatedly population-size\n                             #(make-child population test-pairs select-type crossover?))\n                 (inc generation)))))))\n\n\n#_(gp 1000 200 (get-seq) :lexicase-selection true false)&quot;, :offset 7275, :ns &quot;intseq.core&quot;} {:command &quot;(gp 1000 200 (get-seq) :lexicase-selection true false)&quot;, :offset 54, :ns &quot;intseq.core&quot;} {:command &quot;(ns intseq.core\n                                                         (:require [intseq.ops :as ops]\n                                                                   [clojure.math.numeric-tower :as math]))\n\n(defn get-seq []\n  \&quot;Retrieves sequence has an OEIS id of seq-id.\n  Returns a list of coordinate pairs (test-pairs) in the form of (n, a(n)).\n  Note: Retrieval can be done through Mathematica (specified expression or OEIS query)\n        or HTTP request.\&quot;\n  ; simple test\n  ;(for [x (range 0 10 1)]\n  ;  [x (+ (* x x) (+ 2 x) 2)]))\n\n; A037270\n(let [seq [0, 1, 10, 45, 136, 325, 666, 1225, 2080, 3321, 5050, 7381, 10440, 14365, 19306, 25425, 32896, 41905, 52650, 65341, 80200, 97461, 117370, 140185, 166176, 195625, 228826, 266085, 307720, 354061, 405450]\n      index (range (count seq))]\n  (map #(vec [%1 %2]) index seq)))\n\n; A000292\n;(let [seq [0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540]\n;      index (range (count seq))]\n;  (map #(vec [%1 %2]) index seq)))\n\n(def ingredients '(+ - * / mod abs gcd sqrt sin cos tan x -1 1))\n;; Specifies ingredients (mathematical operations) to use.\n;; Note: not all possible operators are included such as expt, lcm, perm, comb.\n;;        not including them right now, because they make the numbers way too big to compute.\n\n(defn error-loop [genome input output]\n  \&quot;Returns the error of the genome for given input output pair.\&quot;\n  (loop [program genome\n         stack ()]\n    (if (empty? program)\n      (if (empty? stack)\n        1000000\n        (math/abs (- output (first stack))))\n      (recur (rest program)\n             (case (first program)\n               + (ops/add stack)\n               - (ops/sub stack)\n               * (ops/mult stack)\n               / (ops/div stack)\n               mod (ops/mod- stack)\n               expt (ops/expt stack)\n               abs (ops/abs stack)\n               gcd (ops/gcd stack)\n               lcm (ops/lcm stack)\n               sqrt (ops/sqrt stack)\n               sin (ops/sin stack)\n               cos (ops/cos stack)\n               tan (ops/tan stack)\n               perm (ops/perm stack)\n               comb (ops/comb stack)\n               x (cons input stack)\n               (cons (first program) stack))))))\n\n(defn error [genome test-pairs]\n  \&quot;Returns the error of genome in the context of test-pairs.\&quot;\n  (reduce + (for [pair test-pairs]\n              (let [input (first pair)\n                    output (second pair)]\n                (error-loop genome input output)))))\n\n(defn new-individual [test-pairs]\n  \&quot;Returns a new, random individual in the context of test-pairs.\&quot;\n  (let [genome (vec (repeatedly 5 #(rand-nth ingredients)))]\n    {:genome genome\n     :error  (error genome test-pairs)}))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&lt; (:error i1) (:error i2))\n              i1\n              i2))\n          individuals))\n\n(defn add-case-error [candidates test-pair]\n  \&quot;Returns candidates with their corresponding case errors.\&quot;\n  (let [input (first test-pair)\n        output (second test-pair)]\n    (map #(conj % {:case-error (error-loop (:genome %) input output)}) candidates)))\n\n(defn lexicase-selection [population test-pairs]\n  \&quot;Returns an individual from the population using lexicase selection.\&quot;\n  (loop [candidates (distinct population)\n         cases (shuffle test-pairs)]\n    (if (or (empty? cases)\n            (empty? (rest candidates)))\n      (rand-nth candidates)\n      (let [candidates-w-case-error (add-case-error candidates (first cases))\n            min-error (apply min (map :case-error candidates-w-case-error))]\n        (recur (filter #(= min-error (:case-error %)) candidates-w-case-error)\n               (rest cases))))))\n\n(defn tournament-selection [population]\n  \&quot;Returns an individual selected from the population using tournament selection.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn select [population test-pairs select-type]\n  \&quot;Returns an individual selected from population using specified selection method.\&quot;\n  (case select-type\n    :tournament-selection (tournament-selection population)\n    :lexicase-selection (lexicase-selection population test-pairs)))\n\n(defn mutate [genome]\n  \&quot;Returns a possibly-mutated copy of genome.\&quot;\n  (let [with-additions (flatten (for [g genome]\n                                  (if (&lt; (rand) 1/20)\n                                    (shuffle (list g (rand-nth ingredients)))\n                                    g)))\n        with-deletions (flatten (for [g with-additions]\n                                  (if (&lt; (rand) 1/11)\n                                    ()\n                                    g)))]\n    (vec with-deletions)))\n\n(defn crossover [genome1 genome2]\n  \&quot;Returns a one-point crossover product of genome1 and genome2\&quot;\n  (let [crossover-point (rand-int (inc (min (count genome1)\n                                            (count genome2))))]\n    (vec (concat (take crossover-point genome1)\n                 (drop crossover-point genome2)))))\n\n(defn make-child [population test-pairs select-type crossover?]\n  \&quot;Returns a new, evaluated child, produced by mutating the result\n  of crossing over parents that are selected from the given population.\&quot;\n  (let [new-genome (mutate (if crossover? (crossover (:genome (select population test-pairs select-type))\n                                                     (:genome (select population test-pairs select-type)))\n                                          (:genome (select population test-pairs select-type))))]\n    {:genome new-genome\n     :error  (error new-genome test-pairs)}))\n\n(defn report [generation population]\n  \&quot;Prints a report on the status of the population at the given generation.\&quot;\n  (let [current-best (best population)]\n    (println {:generation   generation\n              :best-error   (:error current-best)\n              :diversity    (float (/ (count (distinct population))\n                                      (count population)))\n              :average-size (float (/ (-&gt;&gt; population\n                                           (map :genome)\n                                           (map count)\n                                           (reduce +))\n                                      (count population)))\n              :best-genome  (:genome current-best)})))\n\n(defn gp [population-size generations test-pairs select-type crossover?]\n  \&quot;Runs genetic programming to find a function that perfectly fits the test-pairs data\n  in the context of the given population-size and number of generations to run.\&quot;\n  (loop [population (repeatedly population-size\n                                #(new-individual test-pairs))\n         generation 0]\n    (report generation population)\n    (let [best-individual (best population)]\n      (if (or (= (:error best-individual) 0)\n              (&gt;= generation generations))\n        best-individual\n        (recur (repeatedly population-size\n                           #(make-child population test-pairs select-type crossover?))\n               (inc generation))))))\n\n\n#_(gp 1000 200 (get-seq) :lexicase-selection true)&quot;, :offset 7132, :ns &quot;intseq.core&quot;} {:command &quot;(gp 1000 200 (get-seq) :lexicase-selection true)&quot;, :offset 48, :ns &quot;intseq.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for intseq" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="intseq" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for intseq" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f28dc8f2-9cac-4740-9aa3-d60db5fcfb27" name="Default Changelist" comment="" />
      <created>1585855023189</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1585855023189</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1193" height="715" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.18158123" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32905295" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info active="true" anchor="bottom" id="Terminal" order="7" visible="true" weight="0.24398074" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.37271938" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
    <layout-to-restore>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.1789748" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32905295" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" visible="true" weight="0.24398074" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.7949609" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout-to-restore>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="135">
          <caret line="9" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/intseq/utils.clj" />
    <entry file="jar:///Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/rt.jar!/java/math/BigDecimal.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2196" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/math.numeric-tower/0.0.4/math.numeric-tower-0.0.4.jar!/clojure/math/numeric_tower.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="208">
          <caret line="183" selection-start-line="183" selection-end-line="183" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/intseq/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2330">
          <caret line="165" column="2" lean-forward="true" selection-start-line="165" selection-start-column="2" selection-end-line="165" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/intseq/ops.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1185">
          <caret line="79" column="17" selection-start-line="79" selection-start-column="17" selection-end-line="79" selection-end-column="17" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>