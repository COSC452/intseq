(ns intseq.core-test
  (:require [clojure.test :refer :all]
            [intseq.core :refer :all]))

(defn split-sequence [full-seq]
  "Given a sequence, splits it up evenly into a training sequence
  and a testing sequence"
  (let [midpoint (quot (count full-seq) 2)
        training-seq (take midpoint full-seq)
        testing-seq (drop midpoint full-seq)]
    {:training training-seq
     :testing testing-seq}))

(defn check [func seq]
  "Given (1) a function generated by our evolutionary process based on
  some training terms of a sequence, and (2) the sequence we were using,
  checks if the function generates the same new terms as the testing terms"
  (let [testing-seq (:testing (split-sequence seq))
        first-index (first (first testing-seq)) ;; first index of testing sequence
        end-index (first (last testing-seq)) ;; last index of testing sequence
        new-terms (for [index (range first-index (+ end-index 1) 1)]
                    [index (func index)])]
    (= new-terms testing-seq)))

(deftest a-test
  (testing "FIXME, I fail."
    (is (= 0 1))))
